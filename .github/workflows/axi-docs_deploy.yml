name: Build & Deploy AXI Docs

on:
  push:
    branches: [main, master]
    paths-ignore:
      - 'uploads/md/**'
  workflow_dispatch:

jobs:
  # ────────────────────── 构建静态站点 ──────────────────────
  build:
    runs-on: ubuntu-latest
    outputs:
      run_id: ${{ github.run_id }}

    steps:
      - uses: actions/checkout@v4

      - uses: pnpm/action-setup@v4
        with:
          run_install: false      # 让下面一步显式安装，日志更清晰

      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: 安装依赖
        run: pnpm install --frozen-lockfile

      - name: 检查构建目录
        run: |
          echo "🔍 检查构建目录..."
          echo "当前目录: $(pwd)"
          echo "目录内容:"
          ls -la
          echo "docs 目录内容:"
          ls -la docs/ || echo "docs 目录不存在"
          echo ".vitepress 目录内容:"
          ls -la docs/.vitepress/ || echo ".vitepress 目录不存在"

      - name: 构建文档
        run: pnpm run docs:build

      - name: 验证构建产物
        run: |
          echo "🔍 验证构建产物..."
          echo "当前目录: $(pwd)"
          echo "docs/.vitepress/dist 目录是否存在:"
          if [ -d "docs/.vitepress/dist" ]; then
            echo "✅ docs/.vitepress/dist 目录存在"
            echo "构建产物内容:"
            ls -la docs/.vitepress/dist/
            echo "文件数量:"
            find docs/.vitepress/dist -type f | wc -l
            echo "前10个文件:"
            find docs/.vitepress/dist -type f | head -10
            echo "构建产物大小:"
            du -sh docs/.vitepress/dist/
          else
            echo "❌ docs/.vitepress/dist 目录不存在"
            echo "🔍 查找可能的构建产物目录:"
            find . -name "dist" -type d 2>/dev/null || echo "未找到 dist 目录"
            echo "🔍 当前目录内容:"
            ls -la
            echo "🔍 docs 目录内容:"
            ls -la docs/ || echo "docs 目录不存在"
            exit 1
          fi

      - name: 准备上传目录
        run: |
          echo "🔧 准备上传目录..."
          # 确保构建产物目录存在且不为空
          if [ ! -d "docs/.vitepress/dist" ]; then
            echo "❌ 构建产物目录不存在"
            exit 1
          fi
          
          # 检查构建产物是否为空
          if [ -z "$(ls -A docs/.vitepress/dist)" ]; then
            echo "❌ 构建产物目录为空"
            exit 1
          fi
          
          echo "✅ 构建产物准备完成"
          echo "构建产物内容:"
          ls -la docs/.vitepress/dist/
          
          # 创建压缩包以确保目录结构完整
          echo "📦 创建构建产物压缩包..."
          tar -czf dist-axi-docs.tar.gz -C docs/.vitepress dist
          
          echo "✅ 压缩包创建完成"
          echo "📊 压缩包大小: $(du -h dist-axi-docs.tar.gz | cut -f1)"
          echo "📁 压缩包内容预览:"
          tar -tzf dist-axi-docs.tar.gz | head -20

      - name: 上传产物
        uses: actions/upload-artifact@v4
        with:
          name: dist-axi-docs
          path: |
            docs/.vitepress/dist/
            dist-axi-docs.tar.gz
          retention-days: 1
          if-no-files-found: error

      - name: 验证上传
        run: |
          echo "🔍 验证上传结果..."
          echo "上传退出码: $?"
          echo "当前目录: $(pwd)"
          echo "构建产物目录内容:"
          ls -la docs/.vitepress/dist/ || echo "构建产物目录不存在"

  # ────────────────────── 部署说明 ──────────────────────
  deployment-info:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: 部署信息
        run: |
          echo "🎉 构建完成！"
          echo "=========================================="
          echo "📋 构建信息:"
          echo "- 项目名称: ${{ github.repository }}"
          echo "- 构建ID: ${{ github.run_id }}"
          echo "- 分支: ${{ github.ref_name }}"
          echo "- 提交: ${{ github.sha }}"
          echo ""
          echo "📦 构建产物:"
          echo "- 产物名称: dist-axi-docs"
          echo "- 产物路径: docs/.vitepress/dist/"
          echo "- 保留天数: 1天"
          echo ""
          echo "🚀 部署流程:"
          echo "- axi-deploy 将通过 workflow_run 事件自动触发部署"
          echo "- 部署将在构建完成后自动开始"
          echo "- 无需手动操作"
          echo ""
          echo "🌐 访问地址:"
          echo "- 生产环境: https://redamancy.com.cn/docs/"
          echo "=========================================="

  # ────────────────────── 触发远程部署 ──────────────────────
  trigger-deploy:
    needs: build
    runs-on: ubuntu-latest

    env:                      # 把需要的值全部注入环境变量
      RUN_ID: ${{ needs.build.outputs.run_id }}
      SERVER_HOST: ${{ secrets.SERVER_HOST }}
      SERVER_PORT: ${{ secrets.SERVER_PORT }}
      SERVER_USER: ${{ secrets.SERVER_USER }}
      SERVER_KEY: ${{ secrets.SERVER_KEY }}
      DEPLOY_CENTER_PAT: ${{ secrets.DEPLOY_CENTER_PAT }}

    steps:
      - name: 触发部署
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.DEPLOY_CENTER_PAT }}
          script: |
            // 1. 打包机密（为了避开 workflow_call 10 条 secret 限制）
            const deploySecrets = Buffer.from(JSON.stringify({
              SERVER_HOST: process.env.SERVER_HOST,
              SERVER_PORT: process.env.SERVER_PORT,
              SERVER_USER: process.env.SERVER_USER,
              SERVER_KEY : process.env.SERVER_KEY,
              DEPLOY_CENTER_PAT: process.env.DEPLOY_CENTER_PAT
            })).toString('base64');

            // 2. Nginx 片段用模板字符串写更易读
            const nginxConfig = `
              location /docs/ {
                alias /srv/static/axi-docs/;
                index index.html;
                try_files $uri $uri/ /docs/index.html;

                add_header Cache-Control "no-cache, no-store, must-revalidate" always;
                add_header Pragma        "no-cache" always;
                add_header Expires       "0"        always;
              }

              location = /docs { return 301 /docs/; }
            `.trim();

            console.log('🚀  触发 axi-deploy/main-deployment.yml …');
            console.log('项目名称:', context.repo.repo);
            console.log('源仓库:', `${context.repo.owner}/${context.repo.repo}`);
            console.log('运行ID:', process.env.RUN_ID);
            console.log('触发时间:', new Date().toISOString());
            console.log('工作流名称:', context.workflow);
            console.log('分支:', context.ref);
            console.log('提交:', context.sha);

            // 等待一段时间确保artifact完全可用
            console.log('⏳ 等待artifact完全可用...');
            await new Promise(resolve => setTimeout(resolve, 5000)); // 等待5秒
            
            // 再次检查 workflow run 状态
            console.log('🔍 检查 workflow run 状态...');
            const run = await github.rest.actions.getWorkflowRun({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: process.env.RUN_ID
            });
            
            console.log('📊 Workflow run 状态:', run.data.status);
            console.log('📊 Workflow run 结论:', run.data.conclusion);
            
            if (run.data.status !== 'completed') {
              console.log('⏳ Workflow run 尚未完成，继续等待...');
              await new Promise(resolve => setTimeout(resolve, 5000)); // 再等待5秒
            }

            await github.rest.actions.createWorkflowDispatch({
              owner: 'MoseLu',
              repo:  'axi-deploy',
              workflow_id: 'main-deployment.yml',
              ref: 'master',
              inputs: {
                project      : context.repo.repo,
                source_repo  : `${context.repo.owner}/${context.repo.repo}`,
                run_id       : process.env.RUN_ID,
                deploy_type  : 'static',
                nginx_config : nginxConfig,
                test_url     : 'https://redamancy.com.cn/docs/',
                deploy_secrets: deploySecrets
              }
            });

            console.log('✅  部署工作流已成功触发！');
