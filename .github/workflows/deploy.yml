name: Build & Trigger Deploy

on:
  push:
    branches: [main, master]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      run-id: ${{ github.run_id }}   # 供中心仓库拉取 artifact

    steps:
      # 1. 检出代码
      - name: 检出代码
        uses: actions/checkout@v4

      # 2. 根据实际包管理器设置环境 -------------------------------------------------
      # 如果用 pnpm 请改为 pnpm 相关步骤；这里用 npm 为例
      - name: 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      # 3. 安装依赖并构建
      - name: 安装依赖并构建
        run: |
          npm ci
          npm run docs:build

      # 4. 上传构建产物（与中心仓库约定好的名称）
      - name: 上传构建产物
        uses: actions/upload-artifact@v4
        with:
          name: dist-${{ github.event.repository.name }}
          path: docs/.vitepress/dist/
          retention-days: 1         # 24 小时后自动清理，节省空间

  trigger-deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: 触发中心仓库部署
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.DEPLOY_CENTER_PAT }}
          script: |
            await github.rest.actions.createWorkflowDispatch({
              owner: 'MoseLu',
              repo:   'axi-deploy',
              workflow_id: 'external-deploy.yml',
              ref: 'master',
              inputs: {
                project:     '${{ github.event.repository.name }}',
                lang:        'static',
                artifact_id: '${{ needs.build.outputs.run-id }}',
                deploy_path: '/www/wwwroot/${{ github.event.repository.name }}',
                start_cmd:   'echo "静态网站部署完成，无需启动命令"'
              }
            });