name: Build & Deploy AXI Docs

on:
  push:
    branches: [main, master]
    paths-ignore:
      - 'uploads/md/**'
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      run_id: ${{ github.run_id }}

    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置 pnpm
        uses: pnpm/action-setup@v4

      - name: 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: 安装依赖
        run: pnpm install --frozen-lockfile

      - name: 构建项目
        run: pnpm run docs:build

      - name: 上传构建产物
        uses: actions/upload-artifact@v4
        id: upload
        with:
          name: dist-${{ github.event.repository.name }}
          path: docs/.vitepress/dist/
          retention-days: 7

  trigger-deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: 触发部署
      uses: actions/github-script@v7
      env:
        PROJECT: ${{ github.event.repository.name }}
        SOURCE_REPO: ${{ github.repository }}
        RUN_ID: ${{ needs.build.outputs.run_id }}
        DEPLOY_TYPE: static
        NGINX_CONFIG: "location /docs/ { alias /srv/static/axi-docs/; index index.html; try_files $uri $uri/ /docs/index.html; add_header Cache-Control \"no-cache, no-store, must-revalidate\" always; add_header Pragma \"no-cache\" always; add_header Expires \"0\" always; } location = /docs { return 301 /docs/; }"
        SERVER_HOST: ${{ secrets.SERVER_HOST }}
        SERVER_USER: ${{ secrets.SERVER_USER }}
        SERVER_KEY: ${{ secrets.SERVER_KEY }}
        SERVER_PORT: ${{ secrets.SERVER_PORT }}
        DEPLOY_CENTER_PAT: ${{ secrets.DEPLOY_CENTER_PAT }}
      with:
        github-token: ${{ secrets.DEPLOY_CENTER_PAT }}
        script: |
          try {
            console.log('🚀 开始触发部署...');
            console.log('📋 部署参数:');
            console.log('- 项目:', process.env.PROJECT);
            console.log('- 源仓库:', process.env.SOURCE_REPO);
            console.log('- 构建ID:', process.env.RUN_ID);
            console.log('- 部署类型:', process.env.DEPLOY_TYPE);
            console.log('- 服务器:', process.env.SERVER_HOST + ':' + process.env.SERVER_PORT);
            console.log('- 用户:', process.env.SERVER_USER);
            
            const { data: response } = await github.rest.actions.createWorkflowDispatch({
              owner: 'MoseLu',
              repo: 'axi-deploy',
              workflow_id: 'main-deployment.yml',
              ref: 'master',
              inputs: {
                project: process.env.PROJECT,
                source_repo: process.env.SOURCE_REPO,
                run_id: process.env.RUN_ID,
                deploy_type: process.env.DEPLOY_TYPE,
                nginx_config: process.env.NGINX_CONFIG,
                server_host: process.env.SERVER_HOST,
                server_user: process.env.SERVER_USER,
                server_key: process.env.SERVER_KEY,
                server_port: process.env.SERVER_PORT,
                deploy_center_pat: process.env.DEPLOY_CENTER_PAT
              }
            });
            console.log('✅ 部署已成功触发!');
            console.log('📋 触发详情:');
            console.log('- 工作流ID:', response.id);
            console.log('- 状态:', response.status);
          } catch (error) {
            console.error('🚨 触发部署失败:', error.message);
            console.error('错误详情:', error);
            throw error;
          }

